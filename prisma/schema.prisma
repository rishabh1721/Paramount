// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  courses       Course[]

  enrollment Enrollment[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  instructorApplication InstructorApplication?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Course {
  id          String      @id @default(uuid())
  title       String
  description String
  fileKey     String
  price       Int
  duration    Int
  level       CourseLevel @default(Beginner)

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapters   Chapter[]
  enrollment Enrollment[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int
  duration     Int     @default(0) // Add duration in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[] // Add this relation
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  lessonProgress LessonProgress[] // Changed to lowercase: lessonProgress

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id String @id @default(uuid())

  completed     Boolean   @default(false)
  lastWatchedAt DateTime?
  videoProgress Int       @default(0) // Seconds watched

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId String
  Lesson       Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId     String

  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
}

model InstructorApplication {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fullName   String
  bio        String @db.Text
  expertise  String
  experience String @db.Text
  motivation String @db.Text

  status      ApplicationStatus @default(Pending)
  submittedAt DateTime          @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  Pending
  Approved
  Rejected
}
